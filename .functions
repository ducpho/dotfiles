#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Kill processes on port number
# https://github.com/jurre/driveby
function driveby() {
  lsof -i tcp:$1 | awk 'NR!=1 {print $2}' | xargs kill
  printf "Killed everything on port $1\n"
}

## Some picture conversions

function 16mraw() {
  destination="${PWD/pictures/pictures\/16m}"
  mkdir -p "$destination"
  find . -type f -name "${1}" -exec sh -c '
    for file do
      echo "$file"
      mogrify -monitor -path "${destination}" -resize 16000000@\> -filter Triangle -define filter:support=2 -quality 92 -format "jpg" "$file"
      exiftool -overwrite_original -tagsfromfile "$file" "${destination}/${file/CR2/jpg}"
    done
  ' sh {} +
}

function smartresize() {
   mogrify -path $3 -monitor -filter Triangle -define filter:support=2 -thumbnail $2 -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB $1
}

# crop file.jpg width height postfix gravity
function crop() {
  if [ -z "$4" ]
  then
    postfix=$2;
  else
    postfix=$4;
  fi
  if [ -z "$5" ]
  then
    gravity="center";
  else
    gravity=$5;
  fi
  filename="${1%.*}-${postfix}.jpg";

  convert "$1" -resize "${2}x${3}^" -gravity $gravity -crop $2x$3+0+0 +repage -quality 75 "$filename";
  echo "created $filename with gravity $gravity";
}

function homebox() {
  crop "$1" 510 286 homebox $2;
}

function homeslide() {
  crop $1 1920 823 homeslide $2;
}

function par100() {
  crop $1 534 150 p100% $2;
}

function par166() {
  crop $1 166 130 p166 $2;
}

function newsletter() {
  convert $1 -scale 1160 -quality 75 -filter Triangle -define filter:support=2 -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 "${1%.*}-1160.jpg"
}

# example:
# > convert-audio '*.flac' alac m4a
function convert-audio() {
  mkdir -p $3;
  for file in $1; do ffmpeg -i "$file" -c:a $2 $3/"$file".$3; done;
}

# example:
# > convert-video '*.mp4'
function convert-video() {
  mkdir -p 'hevc';

  find . -type f -name "${1}" -exec sh -c '
    for file do
      echo "$file"
      ffmpeg -i "$file" -c:v libx265 -c:a copy "hevc/${file}";
    done
  ' sh {} +
}

function strip-audio() {
  ffmpeg -i "$1" -map 0:a -c:a copy "${1//\.mp4/}.m4a"
}

# Combine audio with picture to upload translated Dharmatalks
function yt-trans() {
  ffmpeg -loop 1 -framerate 2 -i maxresdefault.jpg -i $1 -s 1280x720 -c:v libx265 -preset ultrafast -c:a copy -shortest "${1%.*}.mkv";
}

# Encode for upload to YouTube
function yt() {
  ffmpeg -i "$1" -c:v libx265 -crf 23 -c:a copy -movflags +faststart -pix_fmt yuv420p "${1%.*}-yt.mp4"
}

function convert-screencast() {
  ffmpeg -i "$1" -c:v libx265 -c:a copy -r 24 -s 1920x1080 "${1%.*}.mp4";
  afconvert -f m4af -d aac -c 1 --mix -s 2 -b 16000 -v "$1" "${1%.*}.m4a";
}

# Play number of random chants and sleep. Example:
# > lullaby 3
function lullaby() {
  sudo ~/Music/lull $1 chant
}

# Play great ball chant playlist and sleep.
function greatbell() {
  sudo ~/Music/lull greatbell
}

# Play a random total relaxation and sleep.
function relax() {
  sudo ~/Music/lull 1 relaxation
}

# for cleaning up registration forms html files
function cleanform() {
  #remove id's
  sed -i 's/ id="\w*"//g' $1

  #input tags on new line
  sed -i 's/><input/>\n<input/g' $1

  #label opening and closing on new line
  sed -i 's/><label/>\n<label/g' $1
  sed -i 's/label></label>\n</g' $1

  # list item closing on new line
  sed -i 's/><\/li/>\n<\/li/g' $1

  # remove paragraph tags
  sed -i 's/<p>//g' $1
  sed -i 's/<\/p>//g' $1

  # convert lists to paragraphs
  sed -i 's/<ul>//g' $1
  sed -i 's/<\/ul>//g' $1
  sed -i 's/<li/<p/g' $1
  sed -i 's/<\/li>/<\/p>/g' $1
}

# Update local copy of Tu Dien Lang Mai and do some replaces afterwards because httrack doesn't consider srcset attributes
function tudien() {
    httrack https://langmai.org/tang-kinh-cac/tu-dien-lang-mai/ --mirrorlinks -r2 -d -langmai.org/* +langmai.org/tang-kinh-cac/tu-dien-lang-mai/* +langmai.org/wp-content/* +langmai.org/wp-includes/* --continue
    sed -i 's/https:\/\/langmai.org\/wp-content/..\/..\/..\/wp-content/' langmai.org/tang-kinh-cac/*/*/*.html
    sed -i 's/.jpeg/.jpg/' langmai.org/tang-kinh-cac/*/*/*.html
}

# Usage: `splitpdf input.pdf 6 10`
function splitpdf() {
    filename="${1%.*}-extract.pdf"
    gs -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$filename" -dFirstPage=$2 -dLastPage=$3 -sDEVICE=pdfwrite "$1"
    echo "saved as $filename";
}
